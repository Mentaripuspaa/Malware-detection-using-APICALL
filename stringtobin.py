from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import LabelBinarizer
import csv
import numpy as np
import pandas as pd
from keras.utils import to_categorical
from numpy import array
import category_encoders as ce
from category_encoders import BinaryEncoder


#dataset = pd.read_csv('replacedata1.csv')
data_df = pd.read_csv('mappingdataAPI.csv')
dff = data_df.fillna(0)
daf = pd.DataFrame(dff)
daf.to_csv('clean_data_mapping.csv')
#x = dataset['FILE_2']
#print(x)
########LABEL ENCODER#########
#labelencoder_x = LabelEncoder()
#x1 = labelencoder_x.fit_transform(dataset)
#y = pd.DataFrame(x1)
#y.to_csv('dummy_bin7.csv')
#################################
#y = pd.DataFrame(dataset)

########BINARY ENCODER##############
#cat_e = BinaryEncoder()
#cat_e_A = cat_e.fit_transform(dataset)
#z = pd.DataFrame(cat_e_A)
#result = z.transpose()
#result.to_csv('bin_enc110_1.csv')
#print(result)

#z.to_csv('bin_enc100.csv')
#print(z)
#####################################

#ohe = OneHotEncoder(sparse=False)
#ohe_1 = ohe.fit_transform(dataset)
#ohe_2 = pd.get_dummies(ohe_1, dummy_na=True)
#zz = pd.DataFrame(ohe_2)
#zz.to_csv('ohe_9.csv')
#print(zz)
#pd.get_dummies(y, dummy_na=True)
#print(dataset.dtypes)
#print(dataset.describe())
#print(dataset.nunique())
# df = pd.get_dummies(y, dummy_na=True, columns=["FILE_1"]).head()

#print(pd.get_dummies(dataset, columns=["FILE_1"]).head())
#df.to_csv('dummy_bin1.csv')
# Reading data #
#with open('transformasi_row.csv', 'r') as f:
#    reader = csv.reader(f, delimiter=',')
#    data = list(reader)
#result = np.array(data[:]).astype("str")    #read data in string form
#print(result)
#result = np.array(data[0:784]).astype("str")    #read data in string form
#print(result.shape)
#feature_names = result[0, 0 : len(result[1])]
#labels = result[-1]
#    for row in data:
#        print(row[1])
#result = np.array(row[1]).astype("str")    #read data in string form
#result = np.array(data[0:86]).astype("str")    #read data in string form
#print(result.shape)
#print(result.shape)
#print(data)
#feature_names = result[0, 0 : len(result[1])]
#labels = result                                     #label for classification
#print (result)
##########int encode###########
#label_encoder = LabelEncoder()
#integer_encoded = label_encoder.fit_transform(result)
#print(integer_encoded)
#labelbin = LabelBinarizer()
#bin_label = labelbin.fit_transform(data)

############bin encoder############
#onehot_encoder = OneHotEncoder(sparse=False)
#integer_encoded = integer_encoded.reshape(len(integer_encoded),1)
#onehot_encoded = onehot_encoder.fit_transform(integer_encoded)
#print(onehot_encoded)

#int_encoder = labelencoder.fit_transform(result)
#onehot_encoder = OneHotEncoder(sparse=False)
#int_encoder = int_encoder.reshape(len(int_encoder),1)
#onehot_enc = onehot_encoder.fit_transform(int_encoder)

#encoded = to_categorical(data)
#print(encoded)


#lb = LabelBinarizer()
#print ("Label Binarizer:", lb.fit_transform(data))
